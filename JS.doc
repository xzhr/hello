JS笔记
	JS的数据类型:
1.javascript的数据类型: 字符串 数字 布尔 数组 对象 null  Undefined
2.JavaScript 拥有动态类型。这意味着相同的变量可用作不同的类型： 
		var x                // x 为 undefined
		var x = 6;           // x 为数字JavaScript 只有一种数字类型。数字可以带小数点，也可以不带：
		var x = "Bill";      // x 为字符串

3.JavaScript 只有一种数字类型。数字可以带小数点，也可以不带：
4.数组类型:		数组下标是基于零的
		var cars=new Array();
		cars[0]="Audi";
		cars[1]="BMW";
		cars[2]="Volvo";
		或者 var cars=new Array("Audi","BMW","Volvo"); 或者 var cars =["Audi","BMW","Volvo"]

5.java对象 对象由花括号分割,在括号的内部,对象属性以键值对 (name : value) 来定义。属性由逗号分隔：
	  var person ={firstname:"Bill", lastname:"Gates", id:89757}
	  也可以:var person={
			firstname : "Bill",
			lastname  : "Gates",
			id        :  5566
			};
	属性对象两种寻址方式: name = person.lastname ; name = person["lastname"]
6.Undefined 这个值表示变量不含有值。可以通过将变量的值设置为 null 来清空变量。
7.声明变量类型: var carname=new String;
					var x=      new Number;
					var y=      new Boolean;
					var cars=   new Array;
					var person= new Object;
8.JavaScript 变量均为对象。当声明一个变量时，就创建了一个新的对象

	JS对象:
	JavaScript 中的所有事物都是对象：字符串、数字、数组、日期，等等。在 JavaScript 中，对象是数据（变量）,拥有属性和方法的数据。在面向对象的语言中，属性和方法常被称为对象的成员。
	访问对象的属性和方法: 对象.成员  属性:var message="Hello World!";  var x=message.length;
							         方法:var message="Hello world!";  var x=message.toUpperCase();

9.JS函数:
	函数是由事件驱动的或者当它被调用时执行的可重复使用的代码块。
	函数就是包裹在花括号中的代码块，前面使用了关键词 function：
		function functionname(){
			这里是要执行的代码
		}
	当调用该函数时，会执行函数内的代码。在某事件发生时直接调用函数（比如当用户点击按钮时），并且可由 JavaScript 在任何位置进行调用。 JavaScript 对大小写敏感。
	调用带参数的函数 :function myFunction(var1,var2){    
						这里是要执行的代码
					 }
	变量和参数必须以一致的顺序出现。第一个变量就是第一个被传递的参数的给定的值.

	函数很灵活，可以使用不同的参数来调用该函数，这样就会给出不同的消息：
		<button onclick="myFunction('Harry Potter','Wizard')">点击这里</button>
		<button onclick="myFunction('Bob','Builder')">点击这里</button>

	使用 return 语句时，函数会停止执行，并返回指定的值。
	return 语句就可以实现。函数将值返回调用它的地方.整个 JavaScript 并不会停止执行，仅仅是函数。JavaScript 将继续执行代码，从调用函数的地方。函数调用将被返回值取代
			function myFunction(){
				var x=5;
				return x;
			}

	var myVar=myFunction(); myVar 变量的值是 5，也就是函数 "myFunction()" 所返回的值。
	不把它保存为变量，也可以使用返回值：document.getElementById("demo").innerHTML = myFunction();
	"demo" 元素的 innerHTML 将成为 5，也就是函数 "myFunction()" 所返回的值。

	可以使返回值基于传递到函数中的参数: 计算两个数字的乘积，并返回结果：
		function myFunction(a,b){
			return a*b;
		}
		document.getElementById("demo").innerHTML=myFunction(4,3);
		"demo" 元素的 innerHTML 将是：12

10.把值赋给尚未声明的变量，该变量将被自动作为全局变量声明。
	carname="Volvo";    将声明一个全局变量 carname，即使它在函数内执行。

11.JS的比较,可以在条件语句中使用比较运算符对值进行比较，然后根据结果来采取行动
	if(age >18) document.write("too native");
	条件运算符(三元):   					variablename=(condition)?value1:value2 
	greeting=(visitor=="PRES")?"Dear President ":"Dear ";  
	如果变量 visitor 中的值是 "PRES"，则向变量 greeting 赋值 "Dear President "，否则赋值 "Dear"。

12.循环           JavaScript 支持不同类型的循环：
		for - 循环代码块一定的次数
		for/in - 循环遍历对象的属性
		while - 当指定的条件为 true 时循环指定的代码块
		do/while - 同样当指定的条件为 true 时循环指定的代码块

		for (var i=0; i<5; i++){
 			x=x + "The number is " + i + "<br>";
 		}
    语句 1 是可选的，可有可无,可多个.
    语句2用于评估初始变量的条件。语句2也是可选的,省略了语句 2，那么必须在循环内提供 break。否则循环就无法停下来。这样有可能令浏览器崩溃
    语句3 增加初始变量的值。增量可以是负数 (i--)，或者更大 (i=i+15)。 也可以省略（比如当循环内部有相应的代码时）：

    	for (var i=0,len=cars.length; i<len; i++){
			document.write(cars[i] + "<br>");
		}

			可以省略语句 1（比如在循环开始前已经设置了值时）
		var i=2,len=cars.length;
		for (; i<len; i++){
			document.write(cars[i] + "<br>");
		}
			省略语句1,3
		var i=0,len=cars.length;
		for (; i<len; ){
			document.write(cars[i] + "<br>");
			i++;
		}

	JavaScript for/in 语句循环遍历对象的属性：
	var person = {fname:"Lebron" , lname:"James", age : 33};
	for (x in person){
		txt=txt + person[x];
	}

	break 语句用于跳出循环。continue 用于跳过循环中的一个迭代
	for (i=0;i<10;i++){
		if (i==3) break;
		x=x + "The number is " + i + "<br>";
	}
	The number is 0
	The number is 1
	The number is 2

	for (i=0;i<=10;i++){
	  	if (i==3) continue;
	  	x=x + "The number is " + i + "<br>";
  	}
  	会执行 除了 3 以外的数字

13.通过 HTML DOM，访问JavaScriptHTML文档的所有元素。
	当网页被加载时，浏览器会创建页面的文档对象模型（Document Object Model,HTML DOM 模型被构造为对象的树
	通过可编程的对象模型，JavaScript 获得了足够的能力来创建动态的 HTML。
		JavaScript 能够改变页面中的所有 HTML 元素(元素的内容：innerHTML)
		JavaScript 能够改变页面中的所有 HTML 属性
		JavaScript 能够改变页面中的所有 CSS 样式
		JavaScript 能够对页面中的所有事件做出反应
	查找HTML元素:要操作HMTL元素,先找到元素:
	    通过 id 找到 HTML 元素
		通过标签名找到 HTML 元素
		通过类名找到 HTML 元素  

	查找 id="intro" 元素：	  
	var x=document.getElementById("intro");
	如果找到该元素，则该方法将以对象（在 x 中）的形式返回该元素。如果未找到该元素，则 x 将包含 null。

	通过标签名查找 HTML 元素. 本例查找 id="main" 的元素，然后查找 "main" 中的所有 <p> 元素
	var x=docunment.getElementById("main");
	var y=x.getElementByTagname("p");

14.HTML DOM 允许 JavaScript 改变 HTML 元素的内容。
	在 JavaScript 中，document.write() 可用于直接向 HTML 输出流写内容。不要使用在文档加载之后使用 document.write()。这会覆盖该文档

	修改 HTML 内容的最简单的方法时使用 innerHTML 属性。
	document.getElementById(id).innerHTML=new HTML
	例子: <!DOCTYPE html>
			<html>
			<body>

			<p id="p1">Hello World!</p>

			<script>
			document.getElementById("p1").innerHTML="New text!";
			</script>
			</body>
			</html>
	最终,页面显示出: New text!

    本例改变了 <h1> 元素的内容：
	<h1 id="header">Old Header</h1>

	<script>
	var element=document.getElementById("header");
	element.innerHTML="New Header";
	</script>

	改变 HTML 属性
	如需改变 HTML 元素的属性，请使用这个语法：
		document.getElementById(id).attribute=new value;

		例子:<body>
			<img id="image" src="smiley.gif">
			<script>
			document.getElementById("image").src="landscape.jpg";
			</script>
			</body>
	JavaScript HTML DOM - 改变 CSS
	语法:document.getElementById(id).style.property=new style
	例子:  <p id="p2">Hello World!</p>
			<script>
			document.getElementById("p2").style.color="blue";
			</script>

15.事件
	当用户点击鼠标时   	当网页已加载时 		当图像已加载时 		当鼠标移动到元素上时
	当输入字段被改变时	当提交 HTML 表单时  当用户触发按键时

	向 button 元素分配 onclick 事件：
	<h1 onclick="this.innerHTML='谢谢!'">请点击该文本</h1>

	HTML DOM 允许您通过使用 JavaScript 来向 HTML 元素分配事件：
	<script>
	document.getElementById("myBtn").onclick=function(){displayDate()};
	</script>
	在上面的例子中，名为 displayDate 的函数被分配给 id=myButn" 的 HTML 元素。当按钮被点击时，会执行该函数。

	onload 和 onunload 事件
	onload 和 onunload 事件会在用户进入或离开页面时被触发。onload 和 onunload 事件可用于处理 cookie。
			<body onload="checkCookies()">

16.JavaScript HTML DOM 元素（节点）
		利用JS实现  添加和删除节点（HTML 元素）。

	如需向 HTML DOM 添加新元素，您必须首先创建该元素（元素节点），然后向一个已存在的元素追加该元素。
	<div id="div1">
		<p id="p1">这是一个段落</p>
		<p id="p2">这是另一个段落</p>
	</div>

	<script>
		var para=document.createElement("p"); //首先 创建新的 <p> 元素：
		var node=document.createTextNode("这是新段落。"); //需向 <p> 元素添加文本，先创建文本节点
		para.appendChild(node);		//向 <p> 元素追加这个文本节点：
									//最后必须向一个已有的元素追加这个新元素。

		var element=document.getElementById("div1"); //找到一个已有的元素：
		element.appendChild(para);		//向这个已有的元素追加新元素：
	</script>

	删除已有的 HTML 元素
	例子: 	<div id="div1">  //这个 HTML 文档含有拥有两个子节点（两个 <p> 元素）的 <div> 元素：
				<p id="p1">这是一个段落。</p>
				<p id="p2">这是另一个段落。</p>
			</div>

			<script>
			var parent=document.getElementById("div1");   //找到 id="div1" 的元素：
			var child=document.getElementById("p1");	 //找到 id="p1" 的 <p> 元素：
			parent.removeChild(child);					//从父元素中删除子元素：
			</script>
17.javascript的对象
	对象都有的对象属性:
	constructor  返回对创建此对象的 Number 函数的引用。
	propertype 	 有能力向对象添加属性和方法。
	例子:Date.prototype.format = function(format) { }
	javascript中的每个对象都有prototype属性，Javascript中对象的prototype属性的解释是：返回对象类型原型的引用。每一个构造函数都有一个属性叫做原型。这个属性非常有用：为一个特定类声明通用的变量或者函数。你不需要显式地声明一个prototype属性，因为在每一个构造函数中都有它的存在。
18.javaScript RegExp 正则表达式
		var patt1=new RegExp("e");		RegExp 对象有 3 个方法：test()、exec() 以及 compile()。
		test() 方法检索字符串中的指定值。返回值是 true 或 false。
		例子:	var patt1=new RegExp("e");
				document.write(patt1.test("The best things in life are free")); //检查这句话中是否包含"e"

	    exec() 方法检索字符串中的指定值。返回值是被找到的值。如果没有发现匹配，则返回 null
	    例子:  var patt1=new RegExp("e");
			   document.write(patt1.exec("The best things in life are free"));   //输出结果   e

		compile() 方法用于改变 RegExp。compile() 既可以改变检索模式，也可以添加或删除第二个参数。
		例子: 	var patt1=new RegExp("e");
				document.write(patt1.test("The best things in life are free"));
				patt1.compile("d");
				document.write(patt1.test("The best things in life are free")); 
				由于字符串中存在 "e"，而没有 "d"，以上代码的输出是： truefalse

19.javascript 事件:
	onabort  onblur  onchange onclick  ondblclick  onerror  onfocus  onkeydown  onkeypress  onkeyup
	onload   onmousedown	onmousemove	onmouseout  onmouseover  onmouseup  onreset  onresize 
	onselect  onsubmit  	onunload

20.Window对象
	Window 对象表示浏览器中打开的窗口。如果文档包含框架（frame 或 iframe 标签），浏览器会为 HTML 文档创建一个 window 对象，并为每个框架创建一个额外的 window 对象。
			全局变量是 window 对象的属性。			全局函数是 window 对象的方法。
			甚至 HTML DOM 的 document 也是 window 对象的属性之一.

	Window 对象集合		frames[]  返回窗口中所有命名的框架。
	该集合是 Window 对象的数组，每个 Window 对象在窗口中含有一个框架或 <iframe>。属性 frames.length 存放数组 frames[] 中含有的元素个数。注意，frames[] 数组中引用的框架可能还包括框架，它们自己也具有 frames[] 数组。

	window对象属性(常用) :
	closed 	返回窗口是否已被关闭		 	defaultStatus 	设置或返回窗口状态栏中的默认文本	
	document 对 Document 对象的只读引用 	
	history         对 History 对象的只读引用, 对象包含用户（在浏览器窗口中）访问过的 URL
	innerheight窗口内高  innerwidth  outerheight    outerheight   length设置或返回窗口中的框架数量。
	screen  对 Screen 对象的只读引用	name  设置或返回窗口的名称。status 设置窗口状态栏的文本。
	self 返回对当前窗口的引用。等价于 Window 属性。 parent  返回父窗口  top 返回最顶层的先辈窗口

	Window对象方法:
	一般来说，Window 对象的方法都是对浏览器窗口或框架进行某种操作。而 alert() 方法、confirm() 方法和 prompt 方法则不同，它们通过简单的对话框与用户进行交互。
	alert()  blur()  close()  focus()  moveBy()移动指定的像素  moveTo  confirm()确认
	scrollBy()滚动内容  scrollTo 		resizeBy()按指定像素调整窗口大小 resizeTo
	setinterval()  		clearInterval()   取消由 setInterval() 设置的 timeout   
	setinterval()		clearTimeout ()	  消由 setTimeout() 方法设置的 timeout。
	print()  promote()显示可提示用户输入的对话框。

21.History对象
	History 对象最初设计来表示窗口的浏览历史。但出于隐私方面的原因，History 对象不再允许脚本访问已经访问过的实际 URL。唯一保持使用的功能只有 back()、forward() 和 go() 方法

	back()  加载 history 列表中的前一个 URL。 
	forward() 加载 history 列表中的下一个 URL。
	go() 加载 history 列表中的某个具体页面

22.Location
	Location 对象包含有关当前 URL 的信息。
	Location 对象是 Window 对象的一个部分，可通过 window.location 属性来访问
	location的对象方法:
	assign() 加载新的文档   reload() 重新加载当前文件    replace() 用新的文档替换当前文档。
	例子: 
		function newLocation(){
			window.location="/index.html"
		}
23.HTML DOM Document 对象
	document对象是Window对象的一部分,可以通过 window.document 属性对其进行访问
	每个载入浏览器的 HTML 文档都会成为 Document 对象。Document 对象使我们可以从脚本中对 HTML 页面中的所有元素进行访问。 

	Document对象属性:
	body  	提供对 <body> 元素的直接访问。对于定义了框架集的文档，该属性引用最外层的 <frameset>。
	cookie 设置或返回与当前文档有关的所有 cookie。  domain  返回当前文档的域名。
	lastmodified 返回文档被最后修改的日期和时间。 	referrer  返回载入当前文档的文档的 URL。
	title  返回当前文档的标题。    					URL  	返回当前文档的 URL。

	Document对象方法:
	open()	打开一个流，以收集来自任何 document.write() 或 document.writeln() 方法的输出。
	close()	关闭用 document.open() 方法打开的输出流，并显示选定的数据。	
	write() 向文档写 HTML 表达式 或 JavaScript 代码。	 writeln() 同左,每个表达式之后写一个换行符。
	getElementById() 	getElementByName()  getElementByTagName()

24.HTML DOM Element对象( HTML 元素 ) 
	HTML DOM 节点
	在 HTML DOM （文档对象模型）中，每个部分都是节点：
		文档本身是文档节点
		所有 HTML 元素是元素节点
		所有 HTML 属性是属性节点
		HTML 元素内的文本是文本节点
		注释是注释节点
	属性和方法(常见):
	element.appendChild()    element.attributes 返回元素属性的 NamedNodeMap。
	element.className		设置或返回元素的 class 属性。
	element.dir 			设置或返回元素的内容是否可编辑。
	element.getAttribute() 	返回元素节点的指定属性值。
	element.id				设置或返回元素的 id。
	element.innerHTML		设置或返回元素的内容。
	element.style			设置或返回元素的 style 属性。
	element.title			设置或返回元素的 title 属性。
	element.toString()		把元素转换为字符串。
	nodelist.item()			返回 NodeList 中位于指定下标的节点。
	nodelist.length			返回 NodeList 中的节点数
	element.textContent		设置或返回节点及其后代的文本内容。